@model FinancialPortal.ViewModels.TransactionIndexVM
@using FinancialPortal.Helpers;

@{
    ViewBag.Title = "Index";
}

<div class="container-fluid">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <div class="row">
                <div class="col-lg-1">
                    <div class="row">
                        <div class="col-lg-12">
                            <button href="#transaction-modal" type="button" data-toggle="modal" title="Add Transaction" class="btn btn-success btn-circle btn-lg"><i class="fa fa-plus"></i></button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-11">
                    <h2>All Transactions</h2>
                </div>
            </div>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-4">
                    <div class="row">
                        <div class="col-lg-12">
                            <label>Minimum Date</label>
                            <input placeholder="Minimum Date" id="DateMin" name="DateMin" type="date" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <label>Maximum Date</label>
                            <input placeholder="Maximum Date" id="DateMax" name="DateMax" type="date" />
                        </div>
                    </div>
                    </div>
                <div class="col-lg-6 pull-right">
                    <div class="row">
                        <div class="col-lg-12">
                            <input class="pull-right" placeholder="Maximum Amount" id="AmountMax" name="AmountMax" type="number" />
                            <input class="pull-right" placeholder="Minimum Amount" id="AmountMin" name="AmountMin" type="number" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 text-right">
                            Search ** for reconciled transactions.
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <table class="table" id="transactions" width="100%">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Bank.Name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Description)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Value)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Created)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Updated)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Submitter)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Editor)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Category.Name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AllTrans.First().Type.Name)
                                </th>
                                <th>
                                </th>
                            </tr>
                        </thead>
                        <tbody id="table_data_body">
                            @foreach (var item in Model.AllTrans.Where(t => t.Void == false))
                            {
                                <tr id="row_@item.Id">
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Bank.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Description)
                                    </td>
                                    <td>
                                        @if (!item.Expense)
                                        {
                                            <span class="text-success heavy">
                                                @if (item.Reconciled)
                                                {
                                                    @:+$@item.ReconciledValue<span class="text-primary" title="Reconciled Value">**</span>
                                        }
                                                else
                                                {
                                                    @Html.Raw("+$" + item.Value)
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-danger heavy" title="Expense">
                                                @if (item.Reconciled)
                                                {
                                                    @:-$@item.ReconciledValue<span class="text-primary" title="Reconciled Value">**</span>
                                        }
                                                else
                                                {
                                                    @Html.Raw("-$" + item.Value)
                                                }
                                            </span>
                                        }

                                    </td>
                                    <td id="transaction_create_@item.Id"></td>
                                    <td id="transaction_update_@item.Id"></td>
                                    <td>
                                        @Html.Raw(DisplayHelpers.FirstName(item.Submitter) + " " + DisplayHelpers.LastName(item.Submitter))
                                    </td>
                                    <td>
                                        @if (item.Editor != null)
                                        {
                                            @Html.Raw(DisplayHelpers.FirstName(item.Editor) + " " + DisplayHelpers.LastName(item.Editor))
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Category.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Type.Name)
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-info btn-circle" id="edit_trans_@item.Id" title="Edit Transaction"><i class="fa fa-edit"></i></button>
                                        <button type="button" class="btn btn-danger btn-circle" id="delete_trans_@item.Id" title="Delete Transaction"><i class="fa fa-close"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <div class="row">
                <div class="col-lg-6">
                    @Html.ActionLink("Deleted Transactions", "Voided", "Transactions", null, new { @class = "btn btn-warning" })
                </div>
            </div>
        </div>
    </div>
</div>



@*Create Transactions Modal*@
<div class="modal fade" id="transaction-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container modal-dialog">
        <div class="row">
            <div class="col-lg-1 pull-right">
                <button type="button" class="close" style="color:#cccccc;" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="login-panel panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Add a Transaction</h3>
                    </div>
                    <div class="panel-body">
                        @using (Ajax.BeginForm("Create", "Transactions", FormMethod.Post, new AjaxOptions
                        {
                            InsertionMode = InsertionMode.Replace,
                            HttpMethod = "POST",
                            OnSuccess = "newRow"
                        }, new { ReturnUrl = ViewBag.ReturnUrl, role = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            <fieldset>
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NewTrans.BankId, "Account", htmlAttributes: new { @class = "control-label" })
                                        @Html.DropDownList("BankId", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.NewTrans.BankId, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.NewTrans.Name, "Transaction Title", htmlAttributes: new { @class = "control-label" })
                                    <input class="form-control text-box single-line" data-val="true" data-val-required="The Title field is required." id="Transaction_Name" name="Name" placeholder="Transaction Title" type="text" value="" autofocus>
                                    @Html.ValidationMessageFor(model => model.NewTrans.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.NewTrans.Description, "Transaction Description", htmlAttributes: new { @class = "control-label" })
                                    <input class="form-control text-box single-line" data-val="true" data-val-required="The Description field is required." id="Transaction_Description" name="Description" placeholder="Transaction Description" type="text" value="" autofocus>
                                    @Html.ValidationMessageFor(model => model.NewTrans.Description, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NewTrans.Value, htmlAttributes: new { @class = "control-label" })
                                    <input class="form-control" placeholder="Amount" type="number" step="0.01" name="Value" id="Transaction_Value" required />
                                    @Html.ValidationMessageFor(model => model.NewTrans.Value, "", new { @class = "text-danger" })
                                </div>
                                <div class="checkbox">
                                    <label>
                                        <input data-val="true" data-val-required="The Include field is required." id="Transaction_Expense" name="Expense" type="checkbox" value="true" checked>
                                        Is this an Expense? (e.g. Is money leaving this account?)
                                    </label>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NewTrans.CategoryId, "Category", htmlAttributes: new { @class = "control-label" })
                                    @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.NewTrans.CategoryId, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NewTrans.TypeId, "Transaction Type", htmlAttributes: new { @class = "control-label" })
                                    @Html.DropDownList("TypeId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.NewTrans.TypeId, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    <label>
                                        <input id="connect_hidden" name="Connected" type="hidden" value="false" />
                                        <input data-val="true" id="Connected" name="Connected" type="checkbox" value="true" />
                                        Is this transaction a tranfer?<br />(i.e. Are you moving money from one account to another?)
                                    </label>
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Other Account Involved in Transfer:</label>
                                    @Html.DropDownList("OtherBankId", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                </div>
                                <!-- Change this to a button or input when using this as a form -->
                                <input type="submit" value="Add Transaction" class="btn btn-info btn-block" />
                            </fieldset>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 text-center">
                <button type="button" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times"></i> Cancel</button>
            </div>
        </div>
    </div>
</div>

@*Edit Transactions Modal*@
<div class="modal fade" id="edit-trans-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container modal-dialog">
        <div class="row">
            <div class="col-lg-1 pull-right">
                <button type="button" class="close" style="color:#cccccc;" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="login-panel panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Edit Transaction</h3>
                    </div>
                    <div class="panel-body" id="edit_body">
                        
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 text-center">
                <button type="button" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times"></i> Cancel</button>
            </div>
        </div>
    </div>
</div>

@*Delete Transaction Modal*@
<div class="modal fade" id="delete-trans-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container modal-dialog">
        <div class="row">
            <div class="col-lg-1 pull-right">
                <button type="button" class="close" style="color:#cccccc;" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="login-panel panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Delete Transaction?</h3>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-lg-12">
                                <h3 id="delete_trans_name"></h3>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12" id="delete_trans_description">

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <h4 id="delete_trans_value"></h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                @using (Html.BeginForm("Delete", "Transactions", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <fieldset>
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        <input type="hidden" value="" id="delete_trans_id" name="Id" />
                                        <input type="submit" value="Delete Transaction" class="btn btn-danger btn-block" />
                                    </fieldset>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 text-center">
                <button type="button" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times"></i> Cancel</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        function replaceRow(data){
            $("#edit-trans-modal").modal("hide");
            var oldTable = $("#transactions").DataTable();
            oldTable.destroy();
            $.fn.dataTable.moment( 'D/M/YYYY h:mm:ss a' );
            var table = $("#transactions").DataTable({
                dom: 'Blfrtip',
                buttons: [
                    'colvis'
                ],
                "order": [[4, "desc"]],
                responsive: true
            });
            table.draw();
        }
        function newRow(data){
            $("#transaction-modal").modal("hide");
            $("#Transaction_Name, #Transaction_Description, #Transaction_Value").val("");
            $("#Transaction_Expense").attr("checked","checked");
            $("#CategoryId, #TypeId").val(1);
            $("#Connected").attr("checked",false);
            $("#connect_hidden").attr("value", "false");
            $("#OtherBankId").prop('disabled', "disabled");
            var oldTable = $("#transactions").DataTable();
            oldTable.destroy();
            $("#table_data_body").prepend(data);
            $.fn.dataTable.moment( 'D/M/YYYY h:mm:ss a' );
            var table = $("#transactions").DataTable({
                dom: 'Blfrtip',
                buttons: [
                    'colvis'
                ],
                "order": [[4, "desc"]],
                responsive: true
            });
            table.draw();
        }
        $(document).ready(function () {                     
            
            @foreach(var transaction in Model.AllTrans.Where(t=>t.Void==false))
                {
                    <text>
            $(document).on('click', '#delete_trans_@transaction.Id', function(){DeleteTrans(@transaction.Id,'@transaction.Name','@transaction.Description','@transaction.Expense',@transaction.Value)});
            $(document).on('click', '#edit_trans_@transaction.Id', function()
            {
                $.get("/Transactions/_EditModal/",{id:@transaction.Id},function(partial){
                    $("#edit_body").empty();
                    $("#edit-trans-modal").modal("show");
                    $("#edit_body").html(partial);
                })
                @*EditTrans(@transaction.Id,@transaction.BankId,'@transaction.Name','@transaction.Description',@transaction.Value,'@transaction.Expense','@transaction.Reconciled',@transaction.ReconciledValue,@transaction.CategoryId,@transaction.TypeId)*@
            });

            @if(transaction.Updated != null)
            {
                @:transDate2(@transaction.Id,'@transaction.Created.ToUniversalTime().ToString()', '@transaction.Updated.Value.ToUniversalTime().ToString()');
            }
            else
            {
                @:transDate(@transaction.Id,'@transaction.Created.ToUniversalTime().ToString()');
            }
            </text>
                }         
            $.fn.dataTable.moment( 'D/M/YYYY h:mm:ss a' );
            var table = $("#transactions").DataTable({
                dom: 'Blfrtip',
                buttons: [
                    'colvis'
                ],
                "order": [[4, "desc"]],
                responsive: true
            });
            //Amount Range Search
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var min = parseFloat($('#AmountMin').val(), 10);
                    var max = parseFloat($('#AmountMax').val(), 10);
                    var amount = parseFloat(data[3].match(/(\d+\.?\d+)/)) || 0; // use data for the age column

                    if ((isNaN(min) && isNaN(max)) ||
                         (isNaN(min) && amount <= max) ||
                         (min <= amount && isNaN(max)) ||
                         (min <= amount && amount <= max)) {
                        return true;
                    }
                    return false;
                }
            );
            //Date Range Search
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var min = moment($('#DateMin').val()).dayOfYear() + (365.25 * moment($('#DateMin').val()).year());
                    var max = moment($('#DateMax').val()).dayOfYear() + (365.25 * moment($('#DateMax').val()).year());
                    var date = moment(data[4]).dayOfYear() + (365.25 * moment(data[4]).year()) || 0; // use data for the age column

                    if ((isNaN(min) && isNaN(max)) ||
                         (isNaN(min) && date <= max) ||
                         (min <= date && isNaN(max)) ||
                         (min <= date && date <= max)) {
                        return true;
                    }
                    return false;
                }
            );
            // Event listener to the two range filtering inputs to redraw on input
            $('#AmountMin, #AmountMax').keyup( function() {
                table.draw();
            } );

            $('#DateMin, #DateMax').change(function() {
                table.draw();
            } );

            $("#BankId").change(function(){
                $("#OtherBankId option").prop('disabled',false);
                var bank = $("#BankId").val();
                $("#OtherBankId option[value*="+bank+"]").prop('disabled',true);
            })

            $("#Connected").change(function () {
                if ($(this).is(":checked")) {
                    $("#connect_hidden").attr("value", "true");
                    $("#OtherBankId").prop('disabled', false);
                }
                else {
                    $("#connect_hidden").attr("value", "false");
                    $("#OtherBankId").prop('disabled', "disabled");
                }
            });
        });
    </script>
}