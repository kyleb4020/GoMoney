@model FinancialPortal.Models.Transaction

@using (Ajax.BeginForm("Edit", "Transactions", FormMethod.Post, new AjaxOptions
{
    InsertionMode = InsertionMode.Replace,
    HttpMethod = "POST",
    UpdateTargetId = "row_"+Model.Id,
    OnSuccess = "replaceRow"
}, new { ReturnUrl = ViewBag.ReturnUrl, role = "form" }))
{
    @Html.AntiForgeryToken()
    <fieldset>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <input type="hidden" value="@Model.Id" id="edit_transaction_id" name="Transaction.Id" />
        <input type="hidden" value="@Model.BankId" id="edit_transaction_bankId" name="Transaction.BankId" />
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <input class="form-control text-box single-line" data-val="true" data-val-required="The Title field is required." id="edit_transaction_name" name="Transaction.Name" placeholder="Transaction Title" type="text" value="@Model.Name" autofocus>
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <input class="form-control text-box single-line" id="edit_transaction_description" name="Transaction.Description" placeholder="Transaction Description" type="text" value="@Model.Description">
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
            <input class="form-control" placeholder="Amount" type="number" step="0.01" name="Transaction.Value" id="edit_transaction_value" required="" value="@Model.Value">
            @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
        </div>
        <div class="checkbox">
            <label>
                @if (Model.Expense)
                {
                    <input data-val="true" data-val-required="The Expense field is required." id="edit_transaction_expense" name="Transaction.Expense" type="checkbox" value="true" checked>
                }
                else
                {
                    <input data-val="true" data-val-required="The Expense field is required." id="edit_transaction_expense" name="Transaction.Expense" type="checkbox" value="true">
                }
                Is this an Expense? (e.g. Is money leaving this account?)
            </label>
        </div>
        <div class="checkbox">
            <label>
                @if (Model.Reconciled)
                {
                    <input data-val="true" data-val-required="The reconciled field is required." id="edit_transaction_reconciled" name="Transaction.Reconciled" type="checkbox" value="true" checked>
                }
                else
                {
                    <input data-val="true" data-val-required="The reconciled field is required." id="edit_transaction_reconciled" name="Transaction.Reconciled" type="checkbox" value="true">
                }
                Is there a Reconciled Amount? (e.g. Is a correction needed?)
            </label>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ReconciledValue, "Reconciled Amount", htmlAttributes: new { @class = "control-label" })
            @if (Model.Reconciled)
            {
                <input class="form-control" placeholder="Reconciled Amount" type="number" step="0.01" name="Transaction.ReconciledValue" id="edit_transaction_reconciledvalue" value="@Model.ReconciledValue">
            }
            else
            {
                <input class="form-control" placeholder="Reconciled Amount" type="number" step="0.01" name="Transaction.ReconciledValue" id="edit_transaction_reconciledvalue" disabled>
            }
            @Html.ValidationMessageFor(model => model.ReconciledValue, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("EditCategoryId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TypeId, "Transaction Type", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("EditTypeId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
        </div>
        <input type="submit" value="Save Changes" class="btn btn-success btn-block" />
    </fieldset>
}

<script type="text/javascript">
    $("#edit_transaction_reconciled").change(function () {
        if ($(this).is(":checked")) {
            $("#edit_transaction_reconciledvalue").prop('disabled', false)
        }
        else {
            $("#edit_transaction_reconciledvalue").prop('disabled', "disabled")
        }
    });
</script>